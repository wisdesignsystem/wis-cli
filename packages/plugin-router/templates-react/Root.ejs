import { useState, useEffect } from 'react'
import { useRouteChange } from '@wiscore/router'

import { loadScopeComponent } from './loaderComponent'
import { getRouterPath } from './helper'

import Layout, { getLayout } from './Layout'
import Router from './Router'
import Suspense from './Suspense'
import Debug from './Debug'

window.$__wis_router_type__ = <% if (browserHistory) { %>'browserRouter'<% } else { %>'hashRouter'<% } %>

function isDebug() {
  return new URLSearchParams(window.location.search).get('debug') !== null
}

export function getAppName(currentLayout) {
  const routerPath = getRouterPath()
  const [layoutName = '', appName = ''] = routerPath.split('/').filter(item => item)
  const name = currentLayout ? appName : layoutName

  if (window.$__wis_uncheck_remote__(name)) {
    return name
  }
}

async function loadAppRouter(appName) {
  if (!appName) {
    return
  }

  const router = await loadScopeComponent(appName, './$$Router')
  return router
}

function useAppRouter() {
  const [loaded, setLoaded] = useState(false)
  const [basename, setBasename] = useState(undefined)
  const [AppRouter, setAppRouter] = useState(undefined)

  function resetApplication() {
    setLoaded(false)
    setBasename(undefined)
    setAppRouter(undefined)
  }

  async function installApplication() {
    const layoutName = getLayout()
    const appName = getAppName(layoutName)

    const nextBasename = [layoutName, appName].filter(item => item).join('/')
    setBasename(nextBasename ? `/${nextBasename}` : nextBasename)

    try {
      const ActiveRouter = await loadAppRouter(appName)
      setLoaded(true)
      setAppRouter(ActiveRouter)
    } catch (error) {
      setLoaded(true)
      console.error(error)
    }
  }

  useEffect(() => {
    if (!loaded) {
      installApplication()
    }
  }, [loaded])
  
  useRouteChange(() => {
    resetApplication()
  })

  return { loaded, basename, AppRouter }
}

export default function Root() {
  const { basename, loaded, AppRouter } = useAppRouter()

  function renderAppRouter() {
    if (!loaded) {
      return null
    }

    if (!AppRouter) {
      return <Router basename={basename} />
    }

    return <AppRouter basename={basename} />
  }

  return (
    <Suspense>
      {(isDebug()) && <Debug />}
      <Layout>
        <Suspense mode="page">
          {renderAppRouter()}
        </Suspense>
      </Layout>
    </Suspense>
  )
}
